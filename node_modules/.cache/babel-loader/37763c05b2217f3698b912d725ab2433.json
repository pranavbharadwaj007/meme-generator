{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Pranav\\\\Desktop\\\\react-dev4\\\\meme-gen-hostig\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Pranav\\\\Desktop\\\\react-dev4\\\\meme-gen-hostig\\\\src\\\\Meme\\\\Meme.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { useHistory } from \"react-router-dom\";\nexport default function Meme() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      memes = _useState2[0],\n      setMemes = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      memeindex = _useState4[0],\n      setMemeIndex = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      captions = _useState6[0],\n      setCaptions = _useState6[1];\n\n  var history = useHistory();\n\n  var updateCaption = function updateCaption(e, index) {\n    var text = e.target.value || \"\";\n    setCaptions(captions.map(function (c, i) {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  var generateMeme = function generateMeme() {\n    var currentMeme = memes[memeindex];\n    var formData = new FormData();\n    formData.append(\"username\", \"pranav777\");\n    formData.append(\"password\", \"rickyman\");\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach(function (c, index) {\n      return formData.append(\"boxes[\".concat(index, \"][text]\"), c);\n    });\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(function (res) {\n      res.json().then(function (res) {\n        //console.log(res);\n        if (res.data !== undefined) {\n          history.push(\"/generated?url=\".concat(res.data.url));\n        }\n      });\n    });\n  };\n\n  var shuffleMemes = function shuffleMemes(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * i);\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }; //console.log(memeindex);\n\n\n  useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(function (res) {\n      res.json().then(function (res) {\n        var _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(function () {\n    if (memes.length) {\n      setCaptions(Array(memes[memeindex].box_count).fill(\"\"));\n    }\n  }, [memeindex, memes]); // useEffect(() => {\n  //   console.log(captions);\n  // }, [captions]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, memes.length ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      generateMeme();\n    },\n    className: styles.generate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Generate\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      setMemeIndex(memeindex + 1);\n    },\n    className: styles.skip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Skip\"), captions.map(function (c, index) {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      onChange: function onChange(e) {\n        return updateCaption(e, index);\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: memes[memeindex].url,\n    alt: memes[0].name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://acegif.com/wp-content/uploads/loading-38-gap.jpg\",\n    alt: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Pranav/Desktop/react-dev4/meme-gen-hostig/src/Meme/Meme.js"],"names":["React","useEffect","useState","styles","useHistory","Meme","memes","setMemes","memeindex","setMemeIndex","captions","setCaptions","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","fetch","method","body","then","res","json","data","undefined","push","url","shuffleMemes","array","length","j","Math","floor","random","temp","_memes","Array","box_count","fill","container","generate","skip","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport default function Meme() {\r\n  const [memes, setMemes] = useState([]);\r\n  const [memeindex, setMemeIndex] = useState(0);\r\n  const [captions, setCaptions] = useState([]);\r\n  const history = useHistory();\r\n  const updateCaption = (e, index) => {\r\n    const text = e.target.value || \"\";\r\n    setCaptions(\r\n      captions.map((c, i) => {\r\n        if (index === i) {\r\n          return text;\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const generateMeme = () => {\r\n    const currentMeme = memes[memeindex];\r\n    const formData = new FormData();\r\n    formData.append(\"username\", \"pranav777\");\r\n    formData.append(\"password\", \"rickyman\");\r\n    formData.append(\"template_id\", currentMeme.id);\r\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n    fetch(\"https://api.imgflip.com/caption_image\", {\r\n      method: \"POST\",\r\n      body: formData\r\n    }).then((res) => {\r\n      res.json().then((res) => {\r\n        //console.log(res);\r\n        if (res.data !== undefined) {\r\n          history.push(`/generated?url=${res.data.url}`);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const shuffleMemes = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  };\r\n  //console.log(memeindex);\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\r\n      res.json().then((res) => {\r\n        const _memes = res.data.memes;\r\n        shuffleMemes(_memes);\r\n        setMemes(_memes);\r\n      });\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (memes.length) {\r\n      setCaptions(Array(memes[memeindex].box_count).fill(\"\"));\r\n    }\r\n  }, [memeindex, memes]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(captions);\r\n  // }, [captions]);\r\n  return (\r\n    <div className={styles.container}>\r\n      {memes.length ? (\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              generateMeme();\r\n            }}\r\n            className={styles.generate}\r\n          >\r\n            Generate\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setMemeIndex(memeindex + 1);\r\n            }}\r\n            className={styles.skip}\r\n          >\r\n            Skip\r\n          </button>\r\n          {captions.map((c, index) => {\r\n            return (\r\n              <input onChange={(e) => updateCaption(e, index)} key={index} />\r\n            );\r\n          })}\r\n          <img src={memes[memeindex].url} alt={memes[0].name} />\r\n        </div>\r\n      ) : (\r\n        <img\r\n          src=\"https://acegif.com/wp-content/uploads/loading-38-gap.jpg\"\r\n          alt=\"Loading\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}