{"version":3,"sources":["Meme/styles.module.css","Memegenerated/styles.module.css","Meme/Meme.js","Memegenerated/MemeGenerated.js","App.js","index.js"],"names":["module","exports","Meme","useState","memes","setMemes","memeindex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","undefined","push","url","generateMeme","generate","skip","map","onChange","e","text","target","value","updateCaption","key","src","alt","name","MemeGenerated","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80786898.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__xl7L0\",\"skip\":\"styles_skip__3NxKz\",\"generate\":\"styles_generate__3dFoE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3fh9Z\",\"copy\":\"styles_copy__1R042\",\"home\":\"styles_home__22Fc9\"};","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport default function Meme() {\r\n  const [memes, setMemes] = useState([]);\r\n  const [memeindex, setMemeIndex] = useState(0);\r\n  const [captions, setCaptions] = useState([]);\r\n  const history = useHistory();\r\n  const updateCaption = (e, index) => {\r\n    const text = e.target.value || \"\";\r\n    setCaptions(\r\n      captions.map((c, i) => {\r\n        if (index === i) {\r\n          return text;\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const generateMeme = () => {\r\n    const currentMeme = memes[memeindex];\r\n    const formData = new FormData();\r\n    formData.append(\"username\", \"pranav777\");\r\n    formData.append(\"password\", \"rickyman\");\r\n    formData.append(\"template_id\", currentMeme.id);\r\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n    fetch(\"https://api.imgflip.com/caption_image\", {\r\n      method: \"POST\",\r\n      body: formData\r\n    }).then((res) => {\r\n      res.json().then((res) => {\r\n        //console.log(res);\r\n        if (res.data !== undefined) {\r\n          history.push(`/generated?url=${res.data.url}`);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const shuffleMemes = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  };\r\n  //console.log(memeindex);\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\r\n      res.json().then((res) => {\r\n        const _memes = res.data.memes;\r\n        shuffleMemes(_memes);\r\n        setMemes(_memes);\r\n      });\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (memes.length) {\r\n      setCaptions(Array(memes[memeindex].box_count).fill(\"\"));\r\n    }\r\n  }, [memeindex, memes]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(captions);\r\n  // }, [captions]);\r\n  return (\r\n    <div className={styles.container}>\r\n      {memes.length ? (\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              generateMeme();\r\n            }}\r\n            className={styles.generate}\r\n          >\r\n            Generate\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setMemeIndex(memeindex + 1);\r\n            }}\r\n            className={styles.skip}\r\n          >\r\n            Skip\r\n          </button>\r\n          {captions.map((c, index) => {\r\n            return (\r\n              <input onChange={(e) => updateCaption(e, index)} key={index} />\r\n            );\r\n          })}\r\n          <img src={memes[memeindex].url} alt={memes[0].name} />\r\n        </div>\r\n      ) : (\r\n        <img\r\n          src=\"https://acegif.com/wp-content/uploads/loading-38-gap.jpg\"\r\n          alt=\"Loading\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useClipboard } from \"use-clipboard-copy\";\r\nimport styles from \"./styles.module.css\";\r\nexport default function MemeGenerated() {\r\n  const [copied, setCopied] = useState(false);\r\n  const clipboard = useClipboard();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const url = new URLSearchParams(location.search).get(\"url\");\r\n  const copyLink = () => {\r\n    clipboard.copy(url);\r\n    setCopied(true);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <button onClick={() => history.push(\"/\")} className={styles.home}>\r\n        Make More Memes\r\n      </button>\r\n      {url && <img alt=\"meme\" src={url} />}\r\n      <button onClick={copyLink} className={styles.copy}>\r\n        {copied ? \"Link copied!\" : \"Copy link\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport Meme from \"./Meme/Meme\";\nimport { Switch, Route } from \"react-router-dom\";\nimport MemeGenerated from \"./Memegenerated/MemeGenerated\";\nexport default function App() {\n  return (\n    <div>\n      <h2>Meme Creator</h2>\n      <Switch>\n        <Route exact path=\"/\">\n          <Meme />\n        </Route>\n        <Route path=\"/generated\">\n          <MemeGenerated />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}